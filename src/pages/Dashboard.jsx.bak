import { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { 
  PlusIcon, 
  EyeIcon, 
  HeartIcon,
  ChatBubbleLeftIcon,
  DocumentTextIcon
} from '@heroicons/react/24/outline';
import { toast } from 'sonner';
import api from '../utils/api';
import Button from '../components/ui/Button';
import Card from '../components/ui/Card';
import PostList from '../components/PostList';
import PostCard from '../components/PostCard'

const Dashboard = () => {
  const { user } = useSelector(state => state.auth)
  const [posts, setPosts] = useState([])
  const [stats, setStats] = useState({ totalPosts: 0, totalViews: 0, totalLikes: 0, totalComments: 0 })
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    const loadDashboard = async () => {
      setIsLoading(true);
      try {
        await Promise.all([fetchUserPosts(), fetchUserStats()]);
      } finally {
        setIsLoading(false);
      }
    };
    loadDashboard();
  }, [])

  useEffect(() => {
    const loadDashboard = async () => {
      setIsLoading(true)
      try {
        await Promise.all([fetchUserPosts(), fetchUserStats()])
      } finally {
        setIsLoading(false)
      }
    }
    loadDashboard()
  }, [])

  const fetchUserPosts = async () => {
    try {
      const response = await api.get('/api/posts/user/me')
      setPosts(response.data.posts || [])
    } catch (error) {
      toast.error('Failed to load your posts')
    }
  }

  const fetchUserStats = async () => {
    try {
      const userPosts = await api.get('/api/posts/user/me')
      const posts = userPosts.data.posts || []
      setStats({
        totalPosts: posts.length,
        totalViews: posts.reduce((sum, post) => sum + (post.views || 0), 0),
        totalLikes: posts.reduce((sum, post) => sum + (post.likesCount || 0), 0),
        totalComments: posts.reduce((sum, post) => sum + (post.commentsCount || 0), 0)
      })
    } catch (error) {
      console.error('Failed to load stats:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleDeletePost = async (postId) => {
    if (!window.confirm('Are you sure you want to delete this post?')) return
    
    try {
      await api.delete(`/api/posts/${postId}`)
      setPosts(posts.filter(post => post._id !== postId))
      toast.success('Post deleted successfully')
    } catch (error) {
      toast.error('Failed to delete post')
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
              <p className="text-gray-600 mt-1">Welcome back, {user?.name}!</p>
            </div>
            <Link to="/create">
              <Button size="lg" className="shadow-lg">
                <PlusIcon className="h-5 w-5 mr-2" />
                New Post
              </Button>
            </Link>
          </div>
        </motion.div>

        {/* Stats Cards */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"
        >
          <Card className="p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-purple-100">
                <DocumentTextIcon className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Posts</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalPosts}</p>
              </div>
            </div>
          </Card>

          <Card className="p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-blue-100">
                <EyeIcon className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Views</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalViews}</p>
              </div>
            </div>
          </Card>

          <Card className="p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-red-100">
                <HeartIcon className="h-6 w-6 text-red-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Likes</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalLikes}</p>
              </div>
            </div>
          </Card>

          <Card className="p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-green-100">
                <ChatBubbleLeftIcon className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Comments</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalComments}</p>
              </div>
            </div>
          </Card>
        </motion.div>

        {/* Recent Posts */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Card className="overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-xl font-semibold text-gray-900">Your Posts</h2>
            </div>
            
            {posts.length === 0 ? (
              <div className="text-center py-12">
                <DocumentTextIcon className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">No posts yet</h3>
                <p className="mt-1 text-sm text-gray-500">Get started by creating your first blog post.</p>
                <div className="mt-6">
                  <Link to="/create">
                    <Button>
                      <PlusIcon className="h-4 w-4 mr-2" />
                      Create Post
                    </Button>
                  </Link>
                </div>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {posts.map((post, index) => (
                  <motion.div
                    key={post._id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <PostCard post={post} />
                    <div className="mt-4 flex justify-end space-x-2">
                      <Link to={`/posts/${post._id}/edit`}>
                        <Button variant="outline" size="sm">
                          <PencilSquareIcon className="h-4 w-4 mr-2" />
                          Edit
                        </Button>
                      </Link>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleDelete(post._id)}
                        className="text-red-600 border-red-600 hover:bg-red-50"
                      >
                        <TrashIcon className="h-4 w-4 mr-2" />
                        Delete
                      </Button>
                    </div>
                  </motion.div>
                ))}
                          )}
                          <div className="flex-1">
                            <h3 className="text-lg font-medium text-gray-900 hover:text-purple-600">
                              <Link to={`/post/${post._id}`}>{post.title}</Link>
                            </h3>
                            <p className="text-sm text-gray-500 mt-1">
                              {new Date(post.createdAt).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                              })}
                            </p>
                            <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                              <span className="flex items-center">
                                <EyeIcon className="h-4 w-4 mr-1" />
                                {post.views || 0}
                              </span>
                              <span className="flex items-center">
                                <HeartIcon className="h-4 w-4 mr-1" />
                                {post.likesCount || 0}
                              </span>
                              <span className="flex items-center">
                                <ChatBubbleLeftIcon className="h-4 w-4 mr-1" />
                                {post.commentsCount || 0}
                              </span>
                            </div>
                            <div className="flex items-center space-x-2 mt-4">
                              <Link to={`/post/${post._id}`}>
                                <Button variant="ghost" size="sm">
                                  <EyeIcon className="h-4 w-4" />
                                </Button>
                              </Link>
                              <Link to={`/edit/${post._id}`}>
                                <Button variant="ghost" size="sm">
                                  <PencilSquareIcon className="h-4 w-4" />
                                </Button>
                              </Link>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleDeletePost(post._id)}
                                className="text-red-600 hover:text-red-700 hover:bg-red-50"
                              >
                                <TrashIcon className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                ))}
              </div>
            )}
          </Card>
        </motion.div>
      </div>
    </div>
  )
}

export default Dashboard